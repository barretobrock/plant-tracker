{% macro droplet_svg(x, y, r) %}
    {% set r = r/4 if r else 50 %}
    <circle cx="{{ x + r }}" cy="{{ y - r }}" r="{{ r }}" class="irrigation"></circle>
{% endmacro %}

{% macro map_items_builder(geodata_dict, is_render_for_input) -%}
    {{ caller() }}
    {% if geodata_dict is none %}
        {% set geodata_dict = {} %}
    {% endif %}
    {% for g_type, geodata_list in geodata_dict.items() %}
        <g class="map-item-group {{ g_type }}">
            {% for g in geodata_list %}
                {% if not is_render_for_input %}
                    {# Set url for geodata item#}
                    {% if g_type.startswith('plant_') %}
                        {# get plant url #}
                        {% set url = url_for('plant.get_plant', plant_id=g.plant_id) %}
                    {% else %}
                        {% set url = url_for('geodata.edit_geodata', geo_type=g_type, obj_id=g.gid) %}
                    {% endif %}
                    <a href="{{ url }}" data-bs-toggle="tooltip" title="{{ g.name }}">
                {% endif %}
                {% if g_type.endswith('_point') %}
                    {# build circle#}
                    <circle cx="{{ g.x }}" cy="{{ g.y }}" r="{{ g.r }}" class="{{ g.class }}"></circle>
                    {% if g.is_irrigated %}
                        {{ droplet_svg(g.x, g.y, g.r) }}
                    {% endif %}
                {% else %}
                    {# build polygon #}
                    <polygon points="{{ g.points }}" class="{{ g.class }}">
                        <title>{{ g.name }}</title>
                    </polygon>
                    {% if g.is_irrigated %}
                        {% set x, y = g.points.split(',')[:1] %}
                        {{ droplet_svg(x, y) }}
                    {% endif %}
                {%  endif %}
                {% if is_render_for_input %}
                    </a>
                {% endif %}
            {% endfor %}
        </g>
    {% endfor %}
{% endmacro %}

{% macro map_renderer(is_render_for_input, geodata_dict, x_start, y_start, x_max, y_max) -%}
    {% set x_start = x_start if x_start else 0 %}
    {% set y_start = y_start if y_start else 0 %}
    {% set x_max = x_max if x_max else 12780 %}
    {% set y_max = y_max if y_max else 35210 %}
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='css/map.css') }}">
    <script defer>
        let is_render_for_input
        {% if is_render_for_input %}
            // We're rendering for an input-driven page (form)
            is_render_for_input = true;

            let svg_type_elem = document.getElementById('shape_type'); // this is a form field
            let input_elem = document.getElementById('data');  // this is a form field
            if (input_elem === null) {
                // The forms that aren't specific to geodata will label this differently
                input_elem = document.getElementById('geodata');
            }

            let id_name = svg_type_elem.value;  // 'point' or 'polygon'
            let is_polygon = id_name === 'polygon';
        {% else %}
            // We're rendering a static map (info page)
            is_render_for_input = false;
        {% endif %}

        function plotHandler(input_element, svg_element, is_polygon) {
            if (is_polygon) {
                // polygon
                svg_element.setAttribute('points', input_element.value);
            } else {
                // circle
                let splits = input_element.value.split(',');
                if (splits.length === 0 || splits[0] === '') {
                    svg_element.setAttribute('cx', "2000");
                } else {
                    svg_element.setAttribute('cx', splits[0]);
                }

                if (splits.length <= 1 || splits[1] === '') {
                    svg_element.setAttribute('cy', "2000");
                } else {
                    svg_element.setAttribute('cy', splits[1]);
                }
                if (splits.length < 3 || splits[2] === '') {
                    svg_element.setAttribute('r', "250");
                } else {
                    svg_element.setAttribute('r', splits[2]);
                }
            }
        }
        function plotPoints(elem) {
            let polymap = document.getElementById(id_name);
            plotHandler(elem, polymap, is_polygon)
        }

        window.addEventListener("load", function () {
            if (is_render_for_input) {
                let polymap = document.getElementById(id_name);

                // Plot the initial data
                plotHandler(input_elem, polymap, is_polygon);

                // Handle plotting updates
                input_elem.oninput = function(event) {
                    return plotPoints(event.target);
                }

                // Handle removal of old shape when shape type input is changed
                svg_type_elem.onchange = function (event) {
                    id_name = event.target.value;
                    is_polygon = id_name === 'polygon';
                    if (is_polygon) {
                        let prev_elem = document.getElementById('point')
                        prev_elem.removeAttribute('cx');
                        prev_elem.removeAttribute('cy');
                        prev_elem.removeAttribute('r');
                    } else {
                        let prev_elem = document.getElementById('polygon')
                        prev_elem.removeAttribute('points');
                    }
                }

                // This section handles showing mouse coordinates
                let map = document.getElementById('map');
                let coorddiv = document.getElementById('coords');
                // Update mouse coordinates when moving over the svg
                map.onmousemove = function(event) {
                    let xRatio = 12780 / map.scrollWidth;
                    let yRatio = 35210 / map.scrollHeight;
                    // Get x,y coords of svg on screen
                    {#console.log(event);#}
                    coorddiv.value = Math.round(event.layerX * xRatio) + ', ' + Math.round(event.layerY * yRatio);
                }
                // When svg is clicked...
                //  ... if point, replace value entirely
                //  ... if polygon, add a new line of coordinates to the end
                map.onclick = function (event) {
                    let xRatio = 12780 / map.scrollWidth;
                    let yRatio = 35210 / map.scrollHeight;
                    let val = input_elem.value;
                    if (is_polygon) {
                        // Add new line to geodata input
                        if (input_elem.value !== '') {
                            // Not an empty field, add \n to beginning
                            val += '\n';
                        }
                        val += Math.round(event.layerX * xRatio) + ',' + Math.round(event.layerY * yRatio);
                    } else {
                        val = Math.round(event.layerX * xRatio) + ',' + Math.round(event.layerY * yRatio) + ',' + 250;
                    }
                    input_elem.value = val
                    // trigger new input event since this won't get picked up otherwise
                    input_elem.dispatchEvent(new Event('input'));
                }
            }


        })

    </script>
    {% if is_render_for_input %}
        {# Mouse coordinate popup #}
        <div id="coords-div">
            <span>Mouse coordinates<sup>(mm)</sup>: </span>
            <input id="coords" type="text" readonly />
        </div>
    {% endif %}
    {{ caller() }}
    <svg id="map" viewBox="{{ x_start }} {{ y_start }} {{ x_max }} {{ y_max }}">
        {# Build boundaries, etc. #}
        {% call map_items_builder(geodata_dict, is_render_for_input) %}

        {% endcall %}
        {# Build focus items last so they're on top#}
        {% if is_render_for_input %}
            {# These will be used to plot objects controlled through the input element #}
            <polygon id="polygon" points="" class="focus"></polygon>
            <circle id="point" class="focus"></circle>
        {% endif %}
    </svg>
{% endmacro %}

{% macro render_input_map(geodata_dict, x_start, y_start, x_max, y_max) -%}
    {{ caller() }}
    {% call map_renderer(is_render_for_input=True, geodata_dict=geodata_dict, x_start=x_start, y_start=y_start, x_max=x_max, y_max=y_max) %}
    {% endcall %}

{% endmacro %}

{% macro render_static_map(geodata_dict, x_start, y_start, x_max, y_max) -%}
    {{ caller() }}
    {% call map_renderer(is_render_for_input=False, geodata_dict=geodata_dict, x_start=x_start, y_start=y_start, x_max=x_max, y_max=y_max) %}
    {% endcall %}
{% endmacro %}

